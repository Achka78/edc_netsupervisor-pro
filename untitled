{
  "name": "networkmanager-pro",
  "version": "1.0.0",
  "description": "Professional network management and topology visualization platform",
  "main": "server/server.js",
  "scripts": {
    "start": "node server/server.js",
    "dev": "concurrently \"npm run server:dev\" \"npm run client:dev\"",
    "server:dev": "cd server && npm run dev",
    "client:dev": "cd client && npm start",
    "build": "npm run client:build && npm run server:build",
    "client:build": "cd client && npm run build",
    "server:build": "cd server && npm run build",
    "test": "jest",
    "test:watch": "jest --watch",
    "test:coverage": "jest --coverage",
    "test:server": "jest --config jest.config.js --testPathPattern=server",
    "test:client": "jest --config jest.config.js --testPathPattern=client",
    "test:integration": "jest --config jest.config.js --testPathPattern=integration",
    "test:e2e": "cypress run",
    "test:e2e:open": "cypress open",
    "lint": "eslint . --ext .js,.jsx,.ts,.tsx",
    "lint:fix": "eslint . --ext .js,.jsx,.ts,.tsx --fix",
    "format": "prettier --write .",
    "format:check": "prettier --check .",
    "type-check": "echo 'Type checking not configured'",
    "security:audit": "npm audit --audit-level moderate",
    "security:fix": "npm audit fix",
    "docker:build": "docker build -t networkmanager-pro .",
    "docker:run": "docker-compose up -d",
    "docker:stop": "docker-compose down",
    "docker:logs": "docker-compose logs -f",
    "db:seed": "node scripts/seed-database.js",
    "db:migrate": "node scripts/migrate-database.js",
    "db:backup": "node scripts/backup-database.js",
    "db:restore": "node scripts/restore-database.js",
    "install:all": "npm install && cd client && npm install && cd ../server && npm install",
    "clean": "rm -rf node_modules client/node_modules server/node_modules",
    "clean:build": "rm -rf client/build server/dist",
    "clean:coverage": "rm -rf coverage",
    "clean:logs": "rm -rf logs/*.log",
    "clean:all": "npm run clean && npm run clean:build && npm run clean:coverage",
    "postinstall": "npm run install:all",
    "precommit": "npm run lint && npm run test",
    "prepush": "npm run test:coverage",
    "release": "standard-version",
    "release:patch": "npm version patch && npm run release",
    "release:minor": "npm version minor && npm run release",
    "release:major": "npm version major && npm run release"
  },