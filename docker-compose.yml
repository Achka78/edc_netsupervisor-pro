

services:
  # Application principale
  app:
    build:
      context: .
      dockerfile: Dockerfile
      target: ${NODE_ENV:-production}
    container_name: edc_netsupervisor-app
    restart: unless-stopped
    ports:
      - "${PORT:-5000}:5000"
    environment:
      - NODE_ENV=${NODE_ENV:-production}
      - MONGODB_URI=mongodb://mongodb:27017/edc_netsupervisor
      - REDIS_URL=redis://redis:6379
      - JWT_SECRET=${JWT_SECRET}
      - ENCRYPTION_KEY=${ENCRYPTION_KEY}
      - ENCRYPTION_IV=${ENCRYPTION_IV}
    volumes:
      - ./logs:/app/logs
      - ./uploads:/app/uploads
      - ./backups:/app/backups
      - /var/run/docker.sock:/var/run/docker.sock:ro
    depends_on:
      mongodb:
        condition: service_healthy
      redis:
        condition: service_healthy
    networks:
      - edc_netsupervisor-net
    healthcheck:
      test: ["CMD", "curl", "-f", "http://localhost:5000/api/health"]
      interval: 30s
      timeout: 10s
      retries: 5
      start_period: 40s

  # Base de données MongoDB
  mongodb:
    image: mongo:7.0
    container_name: edc_netsupervisor-mongodb
    restart: unless-stopped
    ports:
      - "27017:27017"
    environment:
      MONGO_INITDB_ROOT_USERNAME: ${MONGO_USERNAME:-admin}
      MONGO_INITDB_ROOT_PASSWORD: ${MONGO_PASSWORD:-password}
      MONGO_INITDB_DATABASE: edc_netsupervisor
    volumes:
      - mongodb_data:/data/db
      - mongodb_config:/data/configdb
      - ./scripts/mongo-init.js:/docker-entrypoint-initdb.d/mongo-init.js:ro
    networks:
      - edc_netsupervisor-net
    healthcheck:
      test: ["CMD", "mongosh", "--eval", "db.adminCommand('ping')"]
      interval: 30s
      timeout: 10s
      retries: 5
      start_period: 40s

  # Cache Redis
  redis:
    image: redis:7.2-alpine
    container_name: edc_netsupervisor-redis
    restart: unless-stopped
    ports:
      - "6379:6379"
    command: redis-server --appendonly yes --requirepass ${REDIS_PASSWORD:-}
    volumes:
      - redis_data:/data
    networks:
      - edc_netsupervisor-net
    healthcheck:
      test: ["CMD", "redis-cli", "ping"]
      interval: 30s
      timeout: 10s
      retries: 5
      start_period: 30s

  # Nginx (Reverse Proxy et Load Balancer)
  nginx:
    image: nginx:1.25-alpine
    container_name: edc_netsupervisor-nginx
    restart: unless-stopped
    ports:
      - "80:80"
      - "443:443"
    volumes:
      - ./nginx/nginx.conf:/etc/nginx/nginx.conf:ro
      - ./nginx/conf.d:/etc/nginx/conf.d:ro
      - ./ssl:/etc/nginx/ssl:ro
      - nginx_logs:/var/log/nginx
    depends_on:
      - app
    networks:
      - edc_netsupervisor-net
    healthcheck:
      test: ["CMD", "curl", "-f", "http://localhost/health"]
      interval: 30s
      timeout: 10s
      retries: 3

  # Prometheus (Monitoring)
  prometheus:
    image: prom/prometheus:v2.48.0
    container_name: edc_netsupervisor-prometheus
    restart: unless-stopped
    ports:
      - "9090:9090"
    volumes:
      - ./monitoring/prometheus.yml:/etc/prometheus/prometheus.yml:ro
      - prometheus_data:/prometheus
    command:
      - '--config.file=/etc/prometheus/prometheus.yml'
      - '--storage.tsdb.path=/prometheus'
      - '--web.console.libraries=/etc/prometheus/console_libraries'
      - '--web.console.templates=/etc/prometheus/consoles'
      - '--storage.tsdb.retention.time=200h'
      - '--web.enable-lifecycle'
    networks:
      - edc_netsupervisor-net

  # Grafana (Dashboard de monitoring)
  grafana:
    image: grafana/grafana:10.2.0
    container_name: edc_netsupervisor-grafana
    restart: unless-stopped
    ports:
      - "3001:3000"
    environment:
      - GF_SECURITY_ADMIN_USER=${GRAFANA_USER:-admin}
      - GF_SECURITY_ADMIN_PASSWORD=${GRAFANA_PASSWORD:-admin}
      - GF_USERS_ALLOW_SIGN_UP=false
    volumes:
      - grafana_data:/var/lib/grafana
      - ./monitoring/grafana/dashboards:/etc/grafana/provisioning/dashboards
      - ./monitoring/grafana/datasources:/etc/grafana/provisioning/datasources
    depends_on:
      - prometheus
    networks:
      - edc_netsupervisor-net

  # ElasticSearch (pour les logs)
  elasticsearch:
    image: docker.elastic.co/elasticsearch/elasticsearch:8.11.0
    container_name: edc_netsupervisor-elasticsearch
    restart: unless-stopped
    environment:
      - discovery.type=single-node
      - xpack.security.enabled=false
      - "ES_JAVA_OPTS=-Xms512m -Xmx512m"
    volumes:
      - elasticsearch_data:/usr/share/elasticsearch/data
    ports:
      - "9200:9200"
    networks:
      - edc_netsupervisor-net
    healthcheck:
      test: ["CMD-SHELL", "curl -f http://localhost:9200/_cluster/health || exit 1"]
      interval: 30s
      timeout: 10s
      retries: 5

  # Kibana (Dashboard pour les logs)
  kibana:
    image: docker.elastic.co/kibana/kibana:8.11.0
    container_name: edc_netsupervisor-kibana
    restart: unless-stopped
    ports:
      - "5601:5601"
    environment:
      - ELASTICSEARCH_HOSTS=http://elasticsearch:9200
    depends_on:
      - elasticsearch
    networks:
      - edc_netsupervisor-net

  # Backup Service
  backup:
    image: alpine:3.18
    container_name: edc_netsupervisor-backup
    restart: unless-stopped
    volumes:
      - mongodb_data:/backup/mongodb:ro
      - ./backups:/backup/output
      - ./scripts/backup.sh:/backup.sh:ro
    environment:
      - BACKUP_INTERVAL=${BACKUP_INTERVAL:-daily}
      - BACKUP_RETENTION_DAYS=${BACKUP_RETENTION_DAYS:-30}
    command: ["sh", "-c", "while true; do /backup.sh; sleep 86400; done"]
    depends_on:
      - mongodb
    networks:
      - edc_netsupervisor-net

# Volumes persistants
volumes:
  mongodb_data:
    driver: local
  mongodb_config:
    driver: local
  redis_data:
    driver: local
  prometheus_data:
    driver: local
  grafana_data:
    driver: local
  elasticsearch_data:
    driver: local
  nginx_logs:
    driver: local

# Réseau
networks:
  edc_netsupervisor-net:
    driver: bridge
    ipam:
      config:
        - subnet: 172.20.0.0/16